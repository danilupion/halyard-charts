# Common labels/annotations applied to all resources
commonLabels: {}
commonAnnotations: {}

# MySQL architecture (currently only standalone is supported)
architecture: standalone

# Authentication configuration
auth:
  # Name of existing secret containing database credentials
  # The secret should contain the following keys:
  #   - MYSQL_ROOT_PASSWORD (required)
  #   - MYSQL_DATABASE (optional, creates database if provided)
  #   - MYSQL_USER (optional, creates user if provided)
  #   - MYSQL_PASSWORD (optional, password for MYSQL_USER)
  existingSecret: ""

# MySQL container image configuration
image:
  registry: docker.io
  repository: mysql
  tag: "9.4.0@sha256:91447968e66961302339ec4dc4d385f5e1a957d98e63c7d52ecf8b1de0907346"
  pullPolicy: IfNotPresent

# Image pull secrets for private registries
imagePullSecrets: []

# Primary MySQL instance configuration
primary:
  # Resource requests and limits
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 1Gi

  # Persistent storage configuration
  persistence:
    enabled: true
    # Storage class name (leave empty for default)
    storageClass: ""
    # Size of persistent volume
    size: 8Gi
    # Access modes
    accessModes:
      - ReadWriteOnce

  # Update strategy
  updateStrategy:
    type: RollingUpdate

  # Custom MySQL configuration (my.cnf)
  # Leave empty to use MySQL defaults
  configuration: ""
  # Example:
  # configuration: |
  #   [mysqld]
  #   max_connections=200
  #   innodb_buffer_pool_size=1G
  #   character-set-server=utf8mb4
  #   collation-server=utf8mb4_unicode_ci

  # Liveness probe configuration
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  # Readiness probe configuration
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

  # Startup probe configuration (for slow-starting instances)
  startupProbe:
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

  # Additional environment variables
  extraEnv: []
    # - name: TZ
    #   value: UTC

  # Pod security context
  podSecurityContext:
    fsGroup: 999

  # Container security context
  securityContext:
    runAsUser: 999
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

# Service configuration
service:
  type: ClusterIP
  port: 3306
  annotations: {}

# Metrics exporter configuration (Prometheus mysqld_exporter)
metrics:
  enabled: true
  image:
    registry: docker.io
    repository: prom/mysqld-exporter
    tag: "v0.18.0@sha256:2598c0571f383708e19016d119bb45c06128a9ebc962c9f49483278ac5a94c41"
    pullPolicy: IfNotPresent

  # Metrics exporter resources
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi

  # ServiceMonitor configuration for Prometheus Operator
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}

# Node selector for pod assignment
nodeSelector: {}

# Tolerations for pod assignment
tolerations: []

# Affinity for pod assignment
affinity: {}
