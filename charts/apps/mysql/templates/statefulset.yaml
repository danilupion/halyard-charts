apiVersion: apps/v1
kind: StatefulSet
metadata:
  {{- include "common.metadata" (dict "name" (include "common.fullname" .) "root" $) | nindent 2 }}
spec:
  serviceName: {{ include "common.fullname" . }}
  replicas: 1
  {{- with .Values.primary.updateStrategy }}
  updateStrategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "common.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "common.selectorLabels" $ | nindent 8 }}
      annotations:
        {{- if .Values.primary.configuration }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.commonAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.primary.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: mysql
          {{- with .Values.primary.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- include "common.image" (dict "repository" (printf "%s/%s" .Values.image.registry .Values.image.repository) "tag" .Values.image.tag "pullPolicy" .Values.image.pullPolicy "root" $) | nindent 10 }}
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
          env:
            # Load credentials from existing secret
            {{- if .Values.auth.existingSecret }}
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: MYSQL_DATABASE
                  optional: true
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: MYSQL_USER
                  optional: true
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: MYSQL_PASSWORD
                  optional: true
            {{- end }}
            {{- with .Values.primary.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
            {{- if .Values.primary.configuration }}
            - name: config
              mountPath: /etc/mysql/conf.d
            {{- end }}
          args:
            - --default-authentication-plugin=caching_sha2_password
          {{- if .Values.primary.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}
            initialDelaySeconds: {{ .Values.primary.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.primary.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.primary.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.primary.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.primary.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.primary.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}
            initialDelaySeconds: {{ .Values.primary.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.primary.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.primary.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.primary.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.primary.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.primary.startupProbe.enabled }}
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}
            initialDelaySeconds: {{ .Values.primary.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.primary.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.primary.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.primary.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.primary.startupProbe.successThreshold }}
          {{- end }}
          {{- with .Values.primary.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: metrics
          {{- include "common.image" (dict "repository" (printf "%s/%s" .Values.metrics.image.registry .Values.metrics.image.repository) "tag" .Values.metrics.image.tag "pullPolicy" .Values.metrics.image.pullPolicy "root" $) | nindent 10 }}
          ports:
            - name: metrics
              containerPort: 9104
              protocol: TCP
          env:
            - name: MYSQLD_EXPORTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.existingSecret }}
                  key: MYSQL_ROOT_PASSWORD
            - name: DATA_SOURCE_NAME
              value: "root:$(MYSQLD_EXPORTER_PASSWORD)@(localhost:3306)/"
          livenessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: metrics
            initialDelaySeconds: 10
            periodSeconds: 5
          {{- with .Values.metrics.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
      volumes:
        {{- if .Values.primary.configuration }}
        - name: config
          configMap:
            name: {{ include "common.fullname" . }}-config
        {{- end }}
        {{- if not .Values.primary.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.primary.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "common.labels" $ | nindent 10 }}
        {{- with .Values.commonAnnotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- toYaml .Values.primary.persistence.accessModes | nindent 10 }}
        {{- with .Values.primary.persistence.storageClass }}
        storageClassName: {{ . }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.primary.persistence.size }}
  {{- end }}
